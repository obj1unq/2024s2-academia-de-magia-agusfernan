import academia.*
import muebles.*
import cosas.*

describe "Academia de Magia" {
	// SI EJECUTO EL DESCRIBE, ME TIRAN ERROR ALGUNOS TEST DE LA PARTE 1. ESTO PASA PORQUE
	// POR EL ESCENARIO DE PRUEBA DE LA PARTE 2 AGREGUE PAVA AL ARMARIO Y LAMAPRA AL GABINETE

	const pelota = new Cosa(marca = cuchuflito, volumen = 3, esMagico = false, esReliquia = false)
	// TODO: construir/obtener una cosa con volumen = 3, marca = cuchuflito, no es mágica ni una reliquia
	const escoba = new Cosa(marca = acme, volumen = 4, esMagico = true, esReliquia = true)
	// TODO: construir/obtener una cosa con volumen = 4, marca = acme, es mágica y una reliquia
	const varita = new Cosa(marca = fenix, volumen = 1, esMagico = true, esReliquia = false)
	// TODO: construir/obtener una cosa con volumen = 1, marca = fenix, es mágica pero no es una reliquia
	const pava = new Cosa(marca = acme, volumen = 2, esMagico = false, esReliquia = true)
	// TODO: construir/obtener una cosa con volumen = 2, marca = acme, no es magica pero sí una reliquia
	const lamparaAladino = new Cosa(marca = fenix, volumen = 3, esMagico = true, esReliquia = true) 
	// TODO: construir/obtener una cosa con volumen = 3, marca = fenix, es mágica y una reliquia
	const baul = new Baul(volumenMax = 5, cosasGuardadas = #{escoba}) 
	// TODO: construir/obtener un baúl con volumen máximo = 5 y la escoba dentro
	const gabineteMagico = new GabineteMagico(cosasGuardadas = #{varita, lamparaAladino}, precio = 6)
	// TODO: construir/obtener un gabinete mágico con la varita dentro. El precio = 6 (segunda parte)
	const armario = new Armario(capacidadMax = 2, cosasGuardadas = #{pelota, pava}) 
	// TODO: construir/obtener un armario con cantidad máxima = 2 y la pelota dentro
	const academia = new Academia(muebles = #{baul, gabineteMagico, armario}) 
	// TODO: construir/obtener una academia que tiene el baúl, el gabinete mágico y el armario


test "punto 1.1 saber si está guardado algo" {
	assert.that(academia.estaGuardada(varita))	
		// TODO: Verificar que la varita está guardada en la academia
	assert.that(academia.estaGuardada(pelota))
		// TODO: Verificar que la pelota está guardada en la academia
	assert.that(academia.estaGuardada(escoba))
		// TODO: Verificar que la escoba está guardada en la academia
	assert.notThat(academia.estaGuardada(pava))
		// TODO: Verificar que la pava NO está guardada en la academia
	assert.notThat(academia.estaGuardada(lamparaAladino))
		// TODO: Verificar que la lámpara NO está guardada en la academia
 	}
 

 	test "punto 1.2, saber en que mueble esta guardado algo" {
		assert.equals(gabineteMagico, academia.muebleEnQueEstaGuardado(varita))
 		// TODO: Verificar que el mueble donde se guarda la varita está es el gabinete mágico
		assert.equals(armario, academia.muebleEnQueEstaGuardado(pelota))
 		// TODO: Verificar que el mueble donde se guarda la pelota está guardada es el armario
		assert.equals(baul, academia.muebleEnQueEstaGuardado(escoba))
 		// TODO: Verificar que el mueble donde se guarda la escoba está guardada es el baúl
 	}

	test "punto 1.3, saber si se puede guardar algo" {
		assert.notThat(academia.puedeGuardar(varita))
		// TODO: Verificar que la varita NO se puede guardar en la academia
		assert.notThat(academia.puedeGuardar(pelota))
		// TODO: Verificar que la pelota NO se puede guardar en la academia
		assert.notThat(academia.puedeGuardar(escoba))
		// TODO: Verificar que la escoba NO se puede guardar en la academia
		assert.that(academia.puedeGuardar(pava))
		// TODO: Verificar que la pava se puede guardar en la academia
		assert.that(academia.puedeGuardar(lamparaAladino))
		// TODO: Verificar que la lámpara se puede guardar en la academia
		armario.capacidadMax(1)
		// TODO: Cambiar la capacidad del armario a 1
		assert.notThat(academia.puedeGuardar(pava))
		// TODO: Verificar que ahora la pava NO se puede guardar en la academia
	}


 	test "punto 1.4 saber en que muebles se puede guardar algo" {
 		// TODO: Verificar que al preguntar en que muebles se puede guardar la pava se obtiene el armario
		assert.equals(#{armario}, academia.mueblesEnLosQuePuedeGuardar(pava))	
 		// TODO: Verificar al preguntar en que muebles se puede guardar la lámpara se obtienen el armario y el gabinete mágico
		assert.equals(#{armario, gabineteMagico}, academia.mueblesEnLosQuePuedeGuardar(lamparaAladino))
	}


  	test "punto 1.5. guardar una cosa" {
  		// TODO: Guardar la pava en la academia
		academia.guardar(pava)
  		// TODO: Verificar que la pava está guardada en la academia
		assert.that(academia.estaGuardada(pava))
  		// TODO: Guardar la lámpara en la academia
		academia.guardar(lamparaAladino)
  		// TODO: Verificar que la lámpara está guardada en la academia
		assert.that(academia.estaGuardada(lamparaAladino))
  		// TODO: Guardar la escoba en la academia (NO SE PUEDE!)
		assert.throwsExceptionWithMessage("No puedo guardar esta cosa", {academia.guardar(escoba)})
  		// TODO: Guardar la pelota en la academia (NO SE PUEDE!)
		assert.throwsExceptionWithMessage("No puedo guardar esta cosa", {academia.guardar(pelota)})
  		// TODO: Guardar la varita en la academia (NO SE PUEDE!)
		assert.throwsExceptionWithMessage("No puedo guardar esta cosa", {academia.guardar(varita)})
  	}
 

  	test "punto 1.5 no poder guardar una cosa por culpa de que no hay mueble" {
  		// TODO: Cambiar la capacidad del armario a 1	
		armario.capacidadMax(1)
  		// TODO: Guardar la pava en la academia (NO SE PUEDE!)
		assert.throwsExceptionWithMessage("No puedo guardar esta cosa", {academia.guardar(pava)})
  		// TODO: Verificar que la pava NO está guardada en la academia
		assert.notThat(academia.estaGuardada(pava))
  	}
 
	test "punto 2.1 utilidad" {
		// TODO: Guardar la pava en el armario
		armario.guardar(pava)
		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.guardar(lamparaAladino)
		// TODO: construir/obtener un baúl mágico con volumen máximo = 12 y con la escoba y la lámpara dentro
		var baulMagico = new BaulMagico(volumenMax = 12, cosasGuardadas = #{lamparaAladino, escoba})
		// TODO: Verificar que la utilidad del armario es 1.1
		assert.equals(1.1, armario.utilidad())
		// TODO: Verificar que la utilidad del ganibete mágico es 3
		assert.equals(3, gabineteMagico.utilidad())
		// TODO: Verificar que la utilidad del baúl es 4
		assert.equals(4, baul.utilidad())
		// TODO: Verificar que la utilidad del baúl mágico es 5
		assert.equals(5, baulMagico.utilidad())
	}
 

 	test "punto 2.2 cosas menos utiles" {
 		// TODO: Guardar la pava en el armario
		armario.guardar(pava)
 		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.guardar(lamparaAladino)
 		// TODO: Verificar que las cosas menos útiles en la academia son la pelota, la varita y la escoba
		assert.equals(#{pelota, varita, escoba}, academia.cosasMenosUtiles())
 	}

	test "punto 2.3 marca de cosa menos util" {
		// TODO: Guardar la pava en el armario
		armario.guardar(pava)
		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.guardar(lamparaAladino)
		// TODO: Verificar que la marca menos útil de la academia es cuchuflito
		assert.equals(cuchuflito, academia.marcaMenosUtil())
	}

	test "punto 2.4 remover cosas menos utiles que no son magicas" {
		// TODO: Guardar la pava en el armario
		armario.guardar(pava)
		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.guardar(lamparaAladino)
		// TODO: Remover las cosas menos útiles de la academia que no son mágicas
		academia.removercosasMenosUtilesYNoMagicas()
		// TODO: Verificar que la varita está guardada en la academia
		assert.that(academia.estaGuardada(varita))
		// TODO: Verificar que la pelota NO está guardada en la academia
		assert.notThat(academia.estaGuardada(pelota))
		// TODO: Verificar que la escoba está guardada en la academia
		assert.that(academia.estaGuardada(escoba))
		// TODO: Verificar que la pava está guardada en la academia
		assert.that(academia.estaGuardada(pava))
		// TODO: Verificar que la lámpara está guardada en la academia
		assert.that(academia.estaGuardada(lamparaAladino))

	}

	test "punto 2.4 imposible remover cosas menos utiles que no son magicas" {
		// TODO: Hacer que la academia tenga solamente el armario y el baúl
		academia.muebles().remove(gabineteMagico)
		// TODO: Remover las cosas menos útiles de la academia que no son mágicas (NO SE PUEDE!)
		academia.removercosasMenosUtilesYNoMagicas()
		assert.that(academia.estaGuardada(pelota)) // La pelota sigue guardada, asi que no se ejecuto 
	}
 
}

